{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python [conda env:ml] *",
      "language": "python",
      "name": "conda-env-ml-py"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.6"
    },
    "varInspector": {
      "cols": {
        "lenName": 16,
        "lenType": 16,
        "lenVar": 40
      },
      "kernels_config": {
        "python": {
          "delete_cmd_postfix": "",
          "delete_cmd_prefix": "del ",
          "library": "var_list.py",
          "varRefreshCmd": "print(var_dic_list())"
        },
        "r": {
          "delete_cmd_postfix": ") ",
          "delete_cmd_prefix": "rm(",
          "library": "var_list.r",
          "varRefreshCmd": "cat(var_dic_list()) "
        }
      },
      "types_to_exclude": [
        "module",
        "function",
        "builtin_function_or_method",
        "instance",
        "_Feature"
      ],
      "window_display": false
    },
    "colab": {
      "name": "Lab4 _CNN_torch_version_Juliana Macedo.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/julianaabdias/Test/blob/main/CNN\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LZ5_QK8_h9cK",
        "outputId": "01f3d076-e66e-4054-cca3-8d282ed8bd18"
      },
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "%pylab inline"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Populating the interactive namespace from numpy and matplotlib\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/IPython/core/magics/pylab.py:161: UserWarning: pylab import has clobbered these variables: ['test', 'unique', 'plotting', 'array']\n",
            "`%matplotlib` prevents importing * from pylab and numpy\n",
            "  \"\\n`%matplotlib` prevents importing * from pylab and numpy\"\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LrFl-6zKD1Rf"
      },
      "source": [
        "from pandas import *\n",
        "import torch\n",
        "import torchvision\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "import torch.optim as optim\n",
        "from torch.optim import Adam\n",
        "from torchvision import datasets, transforms\n",
        "from torch.autograd import Variable"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "E0PHcF9Bh9cU",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ede418c6-b91a-4344-92bd-a0ae03c87e62"
      },
      "source": [
        "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
        "print(device)"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "cpu\n"
          ]
        }
      ]
    },
    {
      "cell_type": "raw",
      "metadata": {
        "id": "P_tgo2iih9cX"
      },
      "source": [
        "Define a couple of parameters \"meaningfully\" -> consult the tutorial for help\n",
        "https://pytorch.org/tutorials/beginner/deep_learning_60min_blitz.html\n",
        "\n",
        "We want to use the MNIST dataset (not CIFAR)!"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XJ97lP8kh9cY"
      },
      "source": [
        "n_epochs = 10\n",
        "batch_size_train = 15\n",
        "batch_size_test = 10000\n",
        "learning_rate = 0.01\n",
        "momentum = 0.5\n"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "raw",
      "metadata": {
        "id": "ncqO_z8jh9cZ"
      },
      "source": [
        "Now we need to load the MNIST dataset using the dataloader functions\n",
        "for CIFAR the following transforms are used:\n",
        "transform = transforms.Compose([transforms.ToTensor(),transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])\n",
        "\n",
        "It turns out that for MNIST this transform works better due to the difference in value range:\n",
        "torchvision.transforms.Compose([\n",
        "                               torchvision.transforms.ToTensor(),\n",
        "                               torchvision.transforms.Normalize(\n",
        "                                 (0.1307,), (0.3081,))\n",
        "                             ])\n",
        "                             \n",
        "Observe that the RGB image for CIFAR needs three channels (all 0.5) MNIST has only one gray channel!\n",
        "     \n",
        "\n",
        " "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xBityqQnh9cb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 477
        },
        "outputId": "2625cfc0-9734-49b7-c1ca-efa9d358b3f0"
      },
      "source": [
        "\n",
        "transform = torchvision.transforms.Compose([ torchvision.transforms.ToTensor(), torchvision.transforms.Normalize((0.1307,), (0.3081,))])\n",
        "train_set= datasets.MNIST('.',download=True,train=True,transform=transform)\n",
        "train_loader= torch.utils.data.DataLoader(train_set,batch_size= batch_size_train,shuffle=True)\n",
        "\n",
        "test_set= datasets.MNIST('.',download=True,train=False,transform=transform)\n",
        "test_loader= torch.utils.data.DataLoader(test_set,batch_size= batch_size_test,shuffle=False)"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz\n",
            "Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz to ./MNIST/raw/train-images-idx3-ubyte.gz\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "c9a711cf911946bab39005cdc2e99501",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "  0%|          | 0/9912422 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting ./MNIST/raw/train-images-idx3-ubyte.gz to ./MNIST/raw\n",
            "\n",
            "Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz\n",
            "Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz to ./MNIST/raw/train-labels-idx1-ubyte.gz\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "390294b4fa23476bb54805d45dc893dc",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "  0%|          | 0/28881 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting ./MNIST/raw/train-labels-idx1-ubyte.gz to ./MNIST/raw\n",
            "\n",
            "Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz\n",
            "Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz to ./MNIST/raw/t10k-images-idx3-ubyte.gz\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "18f759281f85409eacd0d4e9d8ff4f44",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "  0%|          | 0/1648877 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting ./MNIST/raw/t10k-images-idx3-ubyte.gz to ./MNIST/raw\n",
            "\n",
            "Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz\n",
            "Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz to ./MNIST/raw/t10k-labels-idx1-ubyte.gz\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "2fd79d81555e4348923d6426444e672a",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "  0%|          | 0/4542 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting ./MNIST/raw/t10k-labels-idx1-ubyte.gz to ./MNIST/raw\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/torchvision/datasets/mnist.py:498: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /pytorch/torch/csrc/utils/tensor_numpy.cpp:180.)\n",
            "  return torch.from_numpy(parsed.astype(m[2], copy=False)).view(*s)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mck_BV_fka1-",
        "outputId": "88dcf692-d3b8-494e-8215-5fb84033ba15"
      },
      "source": [
        "example=enumerate(train_loader)\n",
        "batch_idx,(data,target)=next(example)\n",
        "print(batch_idx)\n",
        "print(data.shape)\n",
        "print(target.shape)\n",
        "batch_idx,(data,target)=next(example)\n",
        "print(batch_idx)\n",
        "print(data.shape)\n",
        "print(target.shape)"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "torch.Size([15, 1, 28, 28])\n",
            "torch.Size([15])\n",
            "1\n",
            "torch.Size([15, 1, 28, 28])\n",
            "torch.Size([15])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "raw",
      "metadata": {
        "id": "Ng6EP-Dlh9cd"
      },
      "source": [
        "I recommend testing if the dataloader worked, render one of the images and put the numeral in the title"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 299
        },
        "id": "4zkeg0Wkh9ce",
        "outputId": "587de76a-f0ea-44b1-e20a-b1560feeeb11"
      },
      "source": [
        "who=5\n",
        "imshow(data[who][0],cmap='gray')\n",
        "\n",
        "imshow(data[who][0], cmap = 'gray')\n",
        "title('image 5')\n",
        "print(target[who])\n"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor(7)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "raw",
      "metadata": {
        "id": "bMGB0DD8h9cf"
      },
      "source": [
        "Now we need to define our convolutional neural network, it should have 1 convolutional layer (I recommend handing over the kernel size as a parameter at construction) and 1 pooling layer followed by other normal layers\n",
        "\n",
        "You only have one in channel (gray)\n",
        "\n",
        "the number of out channels is up to you - pick wisely, the same applies to the other weights of the other layers"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FVab49WaY44l"
      },
      "source": [
        " #get some random images to test nn.Conv2d and nn.Max.Pool2d in order to check the image size to input in the fc1 layer\n",
        "detaiter = iter(train_loader)\n",
        "images, labels = detaiter.next()"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ReUWmPS1Y6s6",
        "outputId": "d3bf7484-3395-4edf-dd16-c4c022d3592b"
      },
      "source": [
        "#test to check how many inputs should be in the linear layers\n",
        "conv1 = nn.Conv2d(1, 3, 2)\n",
        "pool = nn.MaxPool2d(2,2)\n",
        "print(images.shape) #will print first batch size, input channel in this case only 1, and dimensions of the image 28 x 28\n",
        "x = conv1(images)\n",
        "print(x.shape) \n",
        "#efter applying the convolutional layer the size of the image is reduced. it will print first batch size, then output channel specified on conv2d, and size of image\n",
        "x = pool(x)\n",
        "print(x.shape) #will print first batch size, output channel from conv2d, and size of image divided by 2 because kernel size for maxpool is 2\n",
        "x = pool(x) #print shape efter second maxpool\n",
        "print(x.shape)"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "torch.Size([15, 1, 28, 28])\n",
            "torch.Size([15, 3, 27, 27])\n",
            "torch.Size([15, 3, 13, 13])\n",
            "torch.Size([15, 3, 6, 6])\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/torch/nn/functional.py:718: UserWarning: Named tensors and all their associated APIs are an experimental feature and subject to change. Please do not use them for anything important until they are released as stable. (Triggered internally at  /pytorch/c10/core/TensorImpl.h:1156.)\n",
            "  return torch.max_pool2d(input, kernel_size, stride, padding, dilation, ceil_mode)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zDz2aQGIh9ch"
      },
      "source": [
        "#create the model\n",
        "class myCNN(nn.Module):\n",
        "    def __init__(self,kernelSize):\n",
        "        super(myCNN, self).__init__()\n",
        "        self.conv1 = nn.Conv2d(in_channels=1, out_channels=6,kernel_size=kernelSize)\n",
        "        self.pool = nn.MaxPool2d(kernel_size=kernelSize)\n",
        "        self.fc1 = nn.Linear(in_features=6*6*6, out_features=128)          \n",
        "        self.fc2 = nn.Linear(in_features=128, out_features=64)\n",
        "        self.output = nn.Linear(64, 10)\n",
        "      \n",
        "    def forward(self, x):\n",
        "        x = F.relu(self.conv1(x))\n",
        "        x = F.max_pool2d(x, 2, 2)\n",
        "        x = F.max_pool2d(x, 2, 2)\n",
        "        x = x.view(-1, 6*6*6)\n",
        "        x = F.relu(self.fc1(x))\n",
        "        x = F.relu(self.fc2(x))\n",
        "        x = self.output(x)\n",
        "        return x "
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "36easHOf8yzL"
      },
      "source": [
        "#x = x.view(x.size(0),-1)"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Gonfd66W4z2x"
      },
      "source": [
        "model = myCNN(kernelSize = 2).to(device)\n"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "S_ffnr6Fq9hq"
      },
      "source": [
        "#reshape data to test the model on one image\n",
        "images = images.unsqueeze(1)"
      ],
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dTXNA4rrScHc",
        "outputId": "691e315d-0b5c-4609-dbc6-23e8342898d7"
      },
      "source": [
        "#test model in one image\n",
        "model(images[14])\n"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([[ 0.0016, -0.0188, -0.0545,  0.1175,  0.0757,  0.0405, -0.0215, -0.1149,\n",
              "         -0.0624,  0.0460]], grad_fn=<AddmmBackward>)"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "raw",
      "metadata": {
        "id": "EwFEo8Xah9ci"
      },
      "source": [
        "Now implement the training and testing code. Toggle the training and testing for the convolutional neural network\n",
        "using the model.train() and model.eval() functions!\n",
        "Choose your own optimiser and loss function!\n",
        "\n",
        "Collect training and testing accuracy over training"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "00QzxdwtO0UN"
      },
      "source": [
        "#calculating the size of training and testing images\n",
        "train_count=len(train_set)\n",
        "test_count=len(test_set)"
      ],
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GcTCSrHSpBQC",
        "outputId": "0abc44e3-8359-4bfb-a71f-3d4dcb7094ba"
      },
      "source": [
        "print(train_count,test_count)"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "60000 10000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-g4uoQ4ppIMS"
      },
      "source": [
        "#model training\n",
        "\n",
        "def optimizer_loss_train_test():\n",
        "  optimizer=optim.Adam(model.parameters(),lr=0.001,weight_decay=0.0001)\n",
        "  loss_function=nn.CrossEntropyLoss()\n",
        "  best_accuracy=0.0\n",
        "  trainAccuracy=list()\n",
        "  testAccuracy=list()\n",
        "\n",
        "  for epoch in range(n_epochs):\n",
        "      \n",
        "      #Evaluation and training on training dataset\n",
        "      model.train()\n",
        "      train_accuracy=0.0\n",
        "      train_loss=0.0\n",
        "      \n",
        "      for i, (images,labels) in enumerate(train_loader):\n",
        "        #send images and labels to device\n",
        "        if torch.cuda.is_available():\n",
        "          images=Variable(images.cuda())\n",
        "          labels=Variable(labels.cuda())\n",
        "        \n",
        "        #zero the optimizer out at the start of a new batch\n",
        "        optimizer.zero_grad()\n",
        "        \n",
        "        #prediction\n",
        "        outputs=model(images)\n",
        "        #calculate the loss\n",
        "        loss=loss_function(outputs,labels)\n",
        "        #backpropagation\n",
        "        loss.backward()\n",
        "        #update the weight and bias using the computed gradients\n",
        "        optimizer.step()\n",
        "          \n",
        "        train_loss+= loss.cpu().data*images.size(0)\n",
        "        _,prediction=torch.max(outputs.data,1)\n",
        "          \n",
        "        train_accuracy+=int(torch.sum(prediction==labels.data))\n",
        "          \n",
        "      train_accuracy=train_accuracy/train_count\n",
        "      trainAccuracy.append(train_accuracy)\n",
        "      train_loss=train_loss/train_count\n",
        "      \n",
        "      \n",
        "      # Evaluation on testing dataset\n",
        "      model.eval()\n",
        "      \n",
        "      test_accuracy=0.0\n",
        "      for i, (images,labels) in enumerate(test_loader):\n",
        "        if torch.cuda.is_available():\n",
        "          images=Variable(images.cuda())\n",
        "          labels=Variable(labels.cuda())      \n",
        "        \n",
        "        outputs=model(images)\n",
        "        _,prediction=torch.max(outputs.data,1)\n",
        "        test_accuracy+=int(torch.sum(prediction==labels.data))\n",
        "      \n",
        "      test_accuracy = test_accuracy/test_count\n",
        "      testAccuracy.append(test_accuracy)\n",
        "      \n",
        "      print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n",
        "        #Save the best model\n",
        "      if test_accuracy>best_accuracy:\n",
        "          torch.save(model.state_dict(),'best_checkpoint.model')\n",
        "          best_accuracy=test_accuracy\n",
        "  return trainAccuracy, testAccuracy"
      ],
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "raw",
      "metadata": {
        "id": "aIKHaBayh9cm"
      },
      "source": [
        "now we plot both to test for overfitting"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ei0F83Avh9cn",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 456
        },
        "outputId": "a5f2d5ce-a76c-4027-e240-aa190527d07f"
      },
      "source": [
        "trainAccuracy, testAccuracy= optimizer_loss_train_test()\n",
        "plot(trainAccuracy,'k')\n",
        "plot(testAccuracy,'r')"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch: 0 Train Loss: tensor(0.0354) Train Accuracy: 0.9877333333333334 Test Accuracy: 0.9797\n",
            "Epoch: 1 Train Loss: tensor(0.0323) Train Accuracy: 0.98905 Test Accuracy: 0.9802\n",
            "Epoch: 2 Train Loss: tensor(0.0320) Train Accuracy: 0.9897 Test Accuracy: 0.9755\n",
            "Epoch: 3 Train Loss: tensor(0.0296) Train Accuracy: 0.9897 Test Accuracy: 0.9797\n",
            "Epoch: 4 Train Loss: tensor(0.0287) Train Accuracy: 0.9904166666666666 Test Accuracy: 0.9825\n",
            "Epoch: 5 Train Loss: tensor(0.0275) Train Accuracy: 0.9908166666666667 Test Accuracy: 0.9791\n",
            "Epoch: 6 Train Loss: tensor(0.0264) Train Accuracy: 0.9910166666666667 Test Accuracy: 0.9816\n",
            "Epoch: 7 Train Loss: tensor(0.0252) Train Accuracy: 0.9917333333333334 Test Accuracy: 0.9814\n",
            "Epoch: 8 Train Loss: tensor(0.0240) Train Accuracy: 0.9917 Test Accuracy: 0.9801\n",
            "Epoch: 9 Train Loss: tensor(0.0243) Train Accuracy: 0.99115 Test Accuracy: 0.979\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7fcda7b24490>]"
            ]
          },
          "metadata": {},
          "execution_count": 33
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "raw",
      "metadata": {
        "id": "LGuVaX4ph9co"
      },
      "source": [
        "Tune the parameters above until you get a good training efficiency and not too much overfitting, also do not train more than neccesary\n",
        "\n",
        "In the next cell we define the kernel sizes we want to test"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cPnFgf8bh9co",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "08cfb84d-1723-4004-a228-dbc67f611e0e"
      },
      "source": [
        "kernelSizes=[2,3,4,5]\n",
        "\n",
        "for kernelSize in kernelSizes:\n",
        "    #trainAccuracy=list()\n",
        "    #testAccuracy=list()\n",
        "    #instantiate your CNN using kernel size\n",
        "    model = myCNN(kernelSize)\n",
        "    #define optimizer and loss function train and test \n",
        "    trainAccuracy, testAccuracy= optimizer_loss_train_test()\n",
        "    #now plot this\n",
        "    figure()\n",
        "    plot(trainAccuracy,'k')\n",
        "    plot(testAccuracy,'r')\n",
        "    title(\"Kernel size: \"+str(kernelSize))"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch: 0 Train Loss: tensor(0.2650) Train Accuracy: 0.9171333333333334 Test Accuracy: 0.9591\n",
            "Epoch: 1 Train Loss: tensor(0.1121) Train Accuracy: 0.9652833333333334 Test Accuracy: 0.9693\n",
            "Epoch: 2 Train Loss: tensor(0.0857) Train Accuracy: 0.97305 Test Accuracy: 0.9697\n",
            "Epoch: 3 Train Loss: tensor(0.0687) Train Accuracy: 0.97865 Test Accuracy: 0.9758\n",
            "Epoch: 4 Train Loss: tensor(0.0585) Train Accuracy: 0.98075 Test Accuracy: 0.9794\n",
            "Epoch: 5 Train Loss: tensor(0.0514) Train Accuracy: 0.9831333333333333 Test Accuracy: 0.9804\n",
            "Epoch: 6 Train Loss: tensor(0.0463) Train Accuracy: 0.9845666666666667 Test Accuracy: 0.982\n",
            "Epoch: 7 Train Loss: tensor(0.0407) Train Accuracy: 0.9867333333333334 Test Accuracy: 0.9825\n",
            "Epoch: 8 Train Loss: tensor(0.0366) Train Accuracy: 0.9876833333333334 Test Accuracy: 0.9787\n",
            "Epoch: 9 Train Loss: tensor(0.0347) Train Accuracy: 0.9882833333333333 Test Accuracy: 0.9794\n",
            "Epoch: 0 Train Loss: tensor(0.2358) Train Accuracy: 0.92495 Test Accuracy: 0.9694\n",
            "Epoch: 1 Train Loss: tensor(0.0971) Train Accuracy: 0.9694333333333334 Test Accuracy: 0.9732\n",
            "Epoch: 2 Train Loss: tensor(0.0724) Train Accuracy: 0.97695 Test Accuracy: 0.9833\n",
            "Epoch: 3 Train Loss: tensor(0.0572) Train Accuracy: 0.9817333333333333 Test Accuracy: 0.9819\n",
            "Epoch: 4 Train Loss: tensor(0.0480) Train Accuracy: 0.9844833333333334 Test Accuracy: 0.983\n",
            "Epoch: 5 Train Loss: tensor(0.0432) Train Accuracy: 0.9858166666666667 Test Accuracy: 0.9863\n",
            "Epoch: 6 Train Loss: tensor(0.0352) Train Accuracy: 0.98805 Test Accuracy: 0.9863\n",
            "Epoch: 7 Train Loss: tensor(0.0332) Train Accuracy: 0.9887833333333333 Test Accuracy: 0.986\n",
            "Epoch: 8 Train Loss: tensor(0.0308) Train Accuracy: 0.99 Test Accuracy: 0.983\n",
            "Epoch: 9 Train Loss: tensor(0.0290) Train Accuracy: 0.9904 Test Accuracy: 0.9843\n",
            "Epoch: 0 Train Loss: tensor(0.2100) Train Accuracy: 0.93325 Test Accuracy: 0.9566\n",
            "Epoch: 1 Train Loss: tensor(0.0817) Train Accuracy: 0.9749833333333333 Test Accuracy: 0.9806\n",
            "Epoch: 2 Train Loss: tensor(0.0593) Train Accuracy: 0.9807166666666667 Test Accuracy: 0.9795\n",
            "Epoch: 3 Train Loss: tensor(0.0489) Train Accuracy: 0.9849333333333333 Test Accuracy: 0.9836\n",
            "Epoch: 4 Train Loss: tensor(0.0417) Train Accuracy: 0.9868333333333333 Test Accuracy: 0.9867\n",
            "Epoch: 5 Train Loss: tensor(0.0373) Train Accuracy: 0.9877 Test Accuracy: 0.9873\n",
            "Epoch: 6 Train Loss: tensor(0.0323) Train Accuracy: 0.9899166666666667 Test Accuracy: 0.9842\n",
            "Epoch: 7 Train Loss: tensor(0.0301) Train Accuracy: 0.9905166666666667 Test Accuracy: 0.9878\n",
            "Epoch: 8 Train Loss: tensor(0.0271) Train Accuracy: 0.9909333333333333 Test Accuracy: 0.9845\n",
            "Epoch: 9 Train Loss: tensor(0.0243) Train Accuracy: 0.99205 Test Accuracy: 0.9847\n",
            "Epoch: 0 Train Loss: tensor(0.1833) Train Accuracy: 0.9422833333333334 Test Accuracy: 0.9718\n",
            "Epoch: 1 Train Loss: tensor(0.0734) Train Accuracy: 0.9765833333333334 Test Accuracy: 0.9768\n",
            "Epoch: 2 Train Loss: tensor(0.0560) Train Accuracy: 0.98185 Test Accuracy: 0.9807\n",
            "Epoch: 3 Train Loss: tensor(0.0473) Train Accuracy: 0.9845666666666667 Test Accuracy: 0.9849\n",
            "Epoch: 4 Train Loss: tensor(0.0420) Train Accuracy: 0.9869 Test Accuracy: 0.9861\n",
            "Epoch: 5 Train Loss: tensor(0.0364) Train Accuracy: 0.9882166666666666 Test Accuracy: 0.987\n",
            "Epoch: 6 Train Loss: tensor(0.0334) Train Accuracy: 0.989 Test Accuracy: 0.987\n",
            "Epoch: 7 Train Loss: tensor(0.0305) Train Accuracy: 0.9903333333333333 Test Accuracy: 0.9853\n",
            "Epoch: 8 Train Loss: tensor(0.0289) Train Accuracy: 0.9903666666666666 Test Accuracy: 0.9856\n",
            "Epoch: 9 Train Loss: tensor(0.0267) Train Accuracy: 0.9912333333333333 Test Accuracy: 0.9863\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "raw",
      "metadata": {
        "id": "RGQEJFs8h9cp"
      },
      "source": [
        "Compare the plots from above and explain which kernel size worked best, hypothesize about why?"
      ]
    },
    {
      "cell_type": "raw",
      "metadata": {
        "id": "ZCIP1NNEh9cq"
      },
      "source": [
        "Your answer here:\n",
        "\n",
        "The best accuracy was with kernel = 5 and that is because the bigger the kernel is more of the real image it will capture. It works like a filter, it scans the image subsampling it, which means if the size of the kernel is bigger, than the sample is bigger."
      ]
    },
    {
      "cell_type": "raw",
      "metadata": {
        "id": "LLeMjpISh9cq"
      },
      "source": [
        "Now pick a random image and pipe it through your trained CNN\n",
        "extract the output of the convolutional layer for each output channel and visualize that as an image\n",
        "Observe that the template CNN has a self.features variable ... that might help here"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HmkDwJEHh9cq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "608a3b72-a018-420b-ceb7-ad6209daeaf7"
      },
      "source": [
        "#reshape data to test the model on one image\n",
        "#images = images.unsqueeze(1)\n",
        "\n",
        "#test model in one image\n",
        "model(images[14])"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([[-0.0301, -0.1157,  0.0810, -0.1033,  0.0041,  0.0542, -0.0618,  0.0084,\n",
              "          0.0932,  0.1102]], grad_fn=<AddmmBackward>)"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "id": "c_whdb4fds-J",
        "outputId": "fc68f4e3-6749-4e9a-8908-79c062a5a448"
      },
      "source": [
        "imshow(images[14].detach().reshape(28,28))"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f4af6f2e310>"
            ]
          },
          "metadata": {},
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 302
        },
        "id": "VNIPzsnLd3Nx",
        "outputId": "f935e404-a0fc-4347-d148-dfac94361619"
      },
      "source": [
        "features=F.relu(model.conv1(images[14]))\n",
        "print(features.shape)\n",
        "imshow(features.detach().reshape(54,81))"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "torch.Size([1, 6, 27, 27])\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f4af6f0b390>"
            ]
          },
          "metadata": {},
          "execution_count": 26
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "raw",
      "metadata": {
        "id": "YtJjvXg5h9cr"
      },
      "source": [
        "Can you guess the feature that each channel extracted? short text below"
      ]
    },
    {
      "cell_type": "raw",
      "metadata": {
        "id": "48eRzr8wh9cr"
      },
      "source": [
        "Your answer here:\n",
        "\n",
        "I'm not sure if I should start from the top or bottom, but since the top seems to be closer to the printed image, I'll start from the bottom which is where it seems where the layers start learning the features. So my guess is that the first layer from the bottom up is learning maybe some textures and edges, we can see more or less where the image starts and ends and some of the texture. The second and thrid layer are quite similar, difficult to distinguish between them, so I guess there it's learning the position and shape fo the image. The fourth layers looks like it reinforcing the shape with a constrast on the background, the next layers seems to be adding more texture  and the last layer is the result we see in the predicted image."
      ]
    }
  ]
}